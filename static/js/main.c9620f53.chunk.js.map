{"version":3,"sources":["Nav.js","components/PatientInfo.js","components/PatientList.js","components/CovidMap.js","components/SliderComponent.js","components/Slider.js","components/CovidDashboard.js","components/CovidChart.js","App.js","serviceWorker.js","index.js"],"names":["Nav","navStyle","color","className","style","to","PatientInfo","name","address","note","verifyDate","PatientList","patients","refs","currentPatientIndex","updateCurrentPatient","ListGroup","lass","as","map","patient","index","Item","key","ref","onClick","active","CovidMap","currentPatient","handleClick","centerMap","lat","lng","Map","center","zoom","TileLayer","attribution","url","Marker","position","onclick","Popup","railOuterStyle","width","height","transform","cursor","railInnerStyle","borderRadius","pointerEvents","backgroundColor","SliderRail","getRailProps","Handle","domain","min","max","handle","id","value","percent","disabled","getHandleProps","left","WebkitTapHighlightColor","zIndex","role","aria-valuemin","aria-valuemax","aria-valuenow","boxShadow","Tick","tick","count","format","marginTop","fontSize","textAlign","fontFamily","marginLeft","defaultProps","d","sliderStyle","formatTick","ms","Date","constantDay","today","startOfToday","SliderBar","slideSlider","addSelectedDay","useState","values","setValues","setSelectedDay","play","setPlay","useEffect","timer","getTime","setInterval","addDays","selectedDay","clearInterval","dateTicks","scaleTime","ticks","Row","margin","Col","xs","mode","step","rootStyle","onChange","date","handles","length","CovidDashboard","props","setCurrentPatient","setCurrentPatientIndex","setPatients","selectedDate","setSelectedDate","selectedPatientList","reduce","Patients","React","createRef","fetch","then","res","json","result","data","scrollToRef","sort","a","b","current","scrollIntoView","behavior","block","concat","Container","Slider","CovidChart","totalData","list","setList","totalList","setTotalList","Object","keys","tmp","ngay","nhiembenh","nghinhiem","khoibenh","top","right","bottom","strokeDasharray","dataKey","type","stroke","activeDot","r","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c9620f53.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction Nav() {\r\n    const navStyle = {\r\n        color: 'white'\r\n    };\r\n\r\n    return (\r\n        <nav>\r\n            <ul className = \"nav-links\">\r\n                <Link style={navStyle} to='/map'>\r\n                    <li>Bản đồ COVID Việt Nam</li>\r\n                </Link>\r\n                <Link style={navStyle} to='/stats'>\r\n                    <li>Biểu đồ COVID Việt Nam và Thế giới</li>\r\n                </Link>\r\n                \r\n            </ul>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Nav;","import React from 'react';\n\nconst PatientInfo = ({name, address, note, verifyDate}) => {\n    return <ul>\n        <li>Name: {name}</li>\n        <li>Address: {address}</li>\n        <li>Note: {note}</li>\n        <li>Verify Date: {verifyDate}</li>\n    </ul>\n};\n\nexport default PatientInfo;","import React from 'react';\r\nimport { ListGroup } from 'react-bootstrap';\r\nimport '../index.css'\r\nconst PatientList = ({patients, refs, currentPatientIndex, updateCurrentPatient}) => {\r\n    return (\r\n        <ListGroup lass=\"list-group\" as = \"ul\"> \r\n                {\r\n                    patients.map((patient,index) =>\r\n                    {\r\n                        return(\r\n                            <ListGroup.Item lass = \"list-group-item\" as = \"li\" \r\n                                key = {index} \r\n                                ref={refs[index]} \r\n                                onClick={() => updateCurrentPatient(patient,index)}\r\n                                active = {index === currentPatientIndex ? true : false}\r\n                            >\r\n                                {patient.name}\r\n                            </ListGroup.Item>\r\n                        );\r\n                    })\r\n                }\r\n        </ListGroup>\r\n    );\r\n}\r\n\r\nexport default PatientList;\r\n","import React from 'react';\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet';\n\nconst CovidMap = ({patients,currentPatient, handleClick}) => {\n    var centerMap = {\n        lat : currentPatient ? currentPatient.lat : 10.762887,\n        lng : currentPatient ? currentPatient.lng : 106.6800684,\n    }\n    return <Map center={[centerMap.lat, centerMap.lng]} zoom={13}>\n        <TileLayer\n            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.osm.org/{z}/{x}/{y}.png\"\n        />\n        {\n            patients.map((patient,index) => \n                <Marker \n                    key = {index}\n                    position={[patient.lat, patient.lng]} \n                    onclick = {() => {\n                       handleClick(patient,index);\n                    }}>\n                    <Popup>\n                        <ul>\n                            <li>Name: {patient.name}</li>\n                            <li>Address: {patient.address}</li>\n                            <li>Note: {patient.note}</li>\n                            <li>Verify date: {patient.verifyDate}</li>\n                        </ul>\n                    </Popup>\n                </Marker>)}\n    </Map>;\n};\n\nexport default CovidMap;\n","import React, { Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n// *******************************************************\r\n// RAIL\r\n// *******************************************************\r\nconst railOuterStyle = {\r\n  position: \"absolute\",\r\n  width: \"100%\",\r\n  height: 40,\r\n  transform: \"translate(0%, -50%)\",\r\n  cursor: \"pointer\"\r\n};\r\n\r\nconst railInnerStyle = {\r\n  position: \"absolute\",\r\n  width: \"100%\",\r\n  height: 8,\r\n  transform: \"translate(0%, -50%)\",\r\n  borderRadius: 4,\r\n  pointerEvents: \"none\",\r\n  backgroundColor: \"rgb(155,155,155)\"\r\n};\r\n\r\nexport function SliderRail({ getRailProps }) {\r\n  return (\r\n    <Fragment>\r\n      <div style={railOuterStyle} {...getRailProps()} />\r\n      <div style={railInnerStyle} />\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nSliderRail.propTypes = {\r\n  getRailProps: PropTypes.func.isRequired\r\n};\r\n\r\n// *******************************************************\r\n// HANDLE COMPONENT\r\n// *******************************************************\r\nexport function Handle({\r\n  domain: [min, max],\r\n  handle: { id, value, percent },\r\n  disabled,\r\n  getHandleProps\r\n}) {\r\n  return (\r\n    <Fragment>\r\n      <div\r\n        style={{\r\n          left: `${percent}%`,\r\n          position: \"absolute\",\r\n          transform: \"translate(-50%, -50%)\",\r\n          WebkitTapHighlightColor: \"rgba(0,0,0,0)\",\r\n          zIndex: 5,\r\n          width: 24,\r\n          height: 42,\r\n          cursor: \"pointer\",\r\n          // border: \"1px solid white\",\r\n          backgroundColor: \"none\"\r\n        }}\r\n        {...getHandleProps(id)}\r\n      />\r\n      <div\r\n        role=\"slider\"\r\n        aria-valuemin={min}\r\n        aria-valuemax={max}\r\n        aria-valuenow={value}\r\n        style={{\r\n          left: `${percent}%`,\r\n          position: \"absolute\",\r\n          transform: \"translate(-50%, -50%)\",\r\n          zIndex: 2,\r\n          width: 20,\r\n          height: 20,\r\n          borderRadius: \"50%\",\r\n          boxShadow: \"1px 1px 1px 1px rgba(0, 0, 0, 0.3)\",\r\n          backgroundColor: disabled ? \"#666\" : \"#333\"\r\n        }}\r\n      />\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nHandle.propTypes = {\r\n  domain: PropTypes.array.isRequired,\r\n  handle: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    value: PropTypes.number.isRequired,\r\n    percent: PropTypes.number.isRequired\r\n  }).isRequired,\r\n  getHandleProps: PropTypes.func.isRequired,\r\n  disabled: PropTypes.bool\r\n};\r\n\r\nHandle.defaultProps = {\r\n  disabled: false\r\n};\r\n\r\n// *******************************************************\r\n// TRACK COMPONENT\r\n// *******************************************************\r\nexport function Track({ source, target, getTrackProps, disabled }) {\r\n  return (\r\n    <div\r\n      style={{\r\n        position: \"absolute\",\r\n        transform: \"translate(0%, -50%)\",\r\n        height: 8,\r\n        zIndex: 1,\r\n        backgroundColor: disabled ? \"#999\" : \"#444\",\r\n        borderRadius: 4,\r\n        cursor: \"pointer\",\r\n        left: `${source.percent}%`,\r\n        width: `${target.percent - source.percent}%`\r\n      }}\r\n      {...getTrackProps()}\r\n    />\r\n  );\r\n}\r\n\r\nTrack.propTypes = {\r\n  source: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    value: PropTypes.number.isRequired,\r\n    percent: PropTypes.number.isRequired\r\n  }).isRequired,\r\n  target: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    value: PropTypes.number.isRequired,\r\n    percent: PropTypes.number.isRequired\r\n  }).isRequired,\r\n  getTrackProps: PropTypes.func.isRequired,\r\n  disabled: PropTypes.bool\r\n};\r\n\r\nTrack.defaultProps = {\r\n  disabled: false\r\n};\r\n\r\n// *******************************************************\r\n// TICK COMPONENT\r\n// *******************************************************\r\nexport function Tick({ tick, count, format }) {\r\n  return (\r\n    <div>\r\n      <div\r\n        style={{\r\n          position: \"absolute\",\r\n          marginTop: 14,\r\n          width: 1,\r\n          height: 5,\r\n          backgroundColor: \"rgb(200,200,200)\",\r\n          left: `${tick.percent}%`\r\n        }}\r\n      />\r\n      <div\r\n        style={{\r\n          position: \"absolute\",\r\n          marginTop: 22,\r\n          fontSize: 10,\r\n          textAlign: \"center\",\r\n          fontFamily: \"Arial, san-serif\",\r\n          marginLeft: `${-(100 / count) / 2}%`,\r\n          width: `${100 / count}%`,\r\n          left: `${tick.percent}%`\r\n        }}\r\n      >\r\n        {format(tick.value)}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nTick.propTypes = {\r\n  tick: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    value: PropTypes.number.isRequired,\r\n    percent: PropTypes.number.isRequired\r\n  }).isRequired,\r\n  count: PropTypes.number.isRequired,\r\n  format: PropTypes.func.isRequired\r\n};\r\n\r\nTick.defaultProps = {\r\n  format: d => d\r\n};","import React, {useState, useEffect} from \"react\";\r\nimport {Row,Col} from \"react-bootstrap\";\r\nimport {Slider, Rail, Handles, Ticks} from \"react-compound-slider\";\r\nimport {SliderRail, Handle, Tick} from \"./SliderComponent\";\r\nimport {startOfToday, addDays, format} from \"date-fns\";\r\nimport {scaleTime} from \"d3-scale\";\r\n\r\nconst sliderStyle = {\r\n  position: \"relative\",\r\n  width: \"100%\"\r\n};\r\n\r\nfunction formatTick(ms) {\r\n  return format(new Date(ms), \"MMM dd\");\r\n}\r\n\r\nconst constantDay = new Date(\"2019-12-8\");\r\nconst today = startOfToday();\r\nconst min = constantDay;\r\nconst max = today;\r\n\r\nconst SliderBar = ({slideSlider,addSelectedDay }) => {\r\n    const [values,setValues] = useState(constantDay);\r\n    const [selectedDay,setSelectedDay] = useState(constantDay); \r\n    const [play, setPlay] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const timer =\r\n        (play && values.getTime() <= today.getTime()) && setInterval(() => {\r\n            setValues(values=>addDays(values,1));\r\n            setSelectedDay(selectedDay => addDays(selectedDay,1));   \r\n            addSelectedDay();   \r\n        }, 1000);\r\n        return () => clearInterval(timer);\r\n      },[values,play])\r\n    \r\n\r\n    const onChange = ([ms]) => {\r\n        let date = new Date(ms);\r\n        setSelectedDay(date); \r\n        setValues(date); \r\n        slideSlider([ms]); \r\n    };\r\n\r\n    const dateTicks = scaleTime()\r\n    .domain([min, max])\r\n    .ticks(8)\r\n    .map(d => +d);\r\n\r\n    return <div>\r\n        <Row style={{ margin: \"5%\", height: 100, width: \"100%\" }}>\r\n            <Col xs={8} >{values && format(values, \"MMM dd yyyy\")}</Col>\r\n            <Col>\r\n                <button onClick = {() => {setPlay(true)}}>\r\n                  Play\r\n                </button>\r\n                <button onClick = {() => {setPlay(false)}}>\r\n                  Pause\r\n                </button>\r\n            </Col>\r\n        </Row>\r\n        <div>\r\n          <Slider\r\n            mode={1}\r\n            step={86400000}\r\n            domain={[+min, +max]}\r\n            rootStyle={sliderStyle}\r\n            onChange={onChange}\r\n            values={[+values]}\r\n          >\r\n            <Rail>\r\n              {({ getRailProps }) => <SliderRail getRailProps={getRailProps} />}\r\n            </Rail>\r\n            <Handles>\r\n              {({ handles, getHandleProps }) => (\r\n                <div>\r\n                  {handles.map(handle => (\r\n                    <Handle\r\n                      key={handle.id}\r\n                      handle={handle}\r\n                      domain={[+min, +max]}\r\n                      getHandleProps={getHandleProps}\r\n                    />\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </Handles>\r\n\r\n            <Ticks values={dateTicks}>\r\n              {({ ticks }) => (\r\n                <div>\r\n                  {ticks.map(tick => (\r\n                    <Tick\r\n                      key={tick.id}\r\n                      tick={tick}\r\n                      count={ticks.length}\r\n                      format={formatTick}\r\n                    />\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </Ticks>\r\n          </Slider>\r\n        </div>\r\n    </div>\r\n}\r\nexport default SliderBar","import React, {useEffect, useState} from 'react';\nimport {Row,Col,Container} from \"react-bootstrap\";\nimport PatientInfo from \"./PatientInfo\";\nimport PatientList from \"./PatientList\";\nimport CovidMap from \"./CovidMap\";\nimport SliderBar from './Slider'; \nimport {addDays} from \"date-fns\";\n\nconst constantDay = new Date(\"2019-12-8\");\nconst CovidDashboard = (props) => {\n    const [currentPatient, setCurrentPatient] = useState();\n    const [currentPatientIndex, setCurrentPatientIndex] = useState();\n    const [patients, setPatients] = useState([]);\n    const [selectedDate, setSelectedDate] = useState(constantDay)\n    let refs = [];\n    let selectedPatientList = [];\n    \n    refs = patients.reduce((Patients,patient,index) => {\n        Patients[index] = React.createRef();\n        return Patients;\n      }, {});\n\n    useEffect(() => {\n        fetch(\"https://cors-anywhere.herokuapp.com/https://maps.vnpost.vn/apps/covid19/api/patientapi/list\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    setPatients(result.data);       \n                },\n            )\n        \n    }, [])\n\n    useEffect(() => {\n        scrollToRef(refs,currentPatientIndex);\n    })\n\n    patients.sort((a, b) => {\n        if (a.verifyDate < b.verifyDate) { \n            return 1; }\n        if (a.verifyDate > b.verifyDate) { \n            return -1; }\n        return 0;\n      });\n    \n    const updateCurrentPatient = (patient,index) => {\n        setCurrentPatient(patient);\n        setCurrentPatientIndex(index);\n    }\n\n    const scrollToRef = (refs,index) => {\n        if (refs[index]) {\n            refs[index].current.scrollIntoView({ behavior: 'smooth', block: 'start'});\n        }        \n    }\n\n    const slideSlider = ([ms]) => {\n        let date = new Date(ms);\n        setSelectedDate(date);\n    }\n\n    const addSelectedDay = () => {\n        setSelectedDate(selectedDate => addDays(selectedDate,1)); \n    }\n\n    patients.map((Patients) => {\n        let date = new Date(Patients.verifyDate); \n        if(date.getTime() <= selectedDate.getTime()){\n            selectedPatientList =  selectedPatientList.concat(Patients);    \n        }\n    })\n\n    return <Container>\n        <Row>\n            <Col xs={10}>\n                <CovidMap \n                    patients = {selectedPatientList ? selectedPatientList : patients}\n                    currentPatient = {currentPatient}\n                    refs = {refs}\n                    handleClick = {updateCurrentPatient}\n                />\n            </Col>\n            <Col xs={2}>\n                {currentPatient &&\n                <PatientInfo \n                    name={currentPatient.name} \n                    address={currentPatient.address} \n                    note={currentPatient.note}\n                    verifyDate={currentPatient.verifyDate}\n                />}\n            </Col>\n        </Row>\n        <Row>\n            <Col xs={10}>\n                <PatientList\n                    patients = {selectedPatientList ? selectedPatientList : patients}\n                    refs ={refs}\n                    currentPatientIndex = {currentPatientIndex}\n                    updateCurrentPatient = {updateCurrentPatient}\n                />\n            </Col>\n        </Row>\n        <Row>\n            <Col xs={10}>\n                <SliderBar \n                    slideSlider = {slideSlider} \n                    addSelectedDay = {addSelectedDay}/>\n            </Col>\n        </Row>\n    </Container>\n};\n\nexport default CovidDashboard;","import React, {useEffect, useState} from 'react';\r\nimport {LineChart, Line,XAxis, YAxis, CartesianGrid, Tooltip, Legend, CartesianAxis} from 'recharts';\r\nimport { Container , Row, Col} from 'react-bootstrap';\r\nconst CovidChart = () => {\r\n    const [list, setList] = useState([]);\r\n    const [totalList, setTotalList] = useState([]);\r\n    let keys = [];\r\n    let totalKeys = [];\r\n    let data = [];\r\n    let totalData = [];\r\n    useEffect(() => {\r\n        fetch('https://td.fpt.ai/corona/corona-chart-vn.json')\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    setList(result);       \r\n                },\r\n            )\r\n        fetch('https://td.fpt.ai/corona/corona-total.json')\r\n        .then(res => res.json())\r\n        .then(\r\n            (result) => {\r\n                setTotalList(result);       \r\n            },\r\n        )\r\n    }, [])\r\n\r\n    \r\n\r\n    keys = Object.keys(list);\r\n    data = keys.map(key => {\r\n        let tmp = {ngay: null,nhiembenh: null,nghinhiem:null,khoibenh: null}\r\n        tmp.ngay = key;\r\n        tmp.nhiembenh = list[key][0];\r\n        tmp.nghinhiem = list[key][1];\r\n        tmp.khoibenh = list[key][2];\r\n        return tmp; \r\n    })\r\n\r\n    totalKeys = Object.keys(totalList);\r\n    totalData = totalKeys.map(key => {\r\n        let tmp = {ngay: null,nhiembenh: null,nghinhiem:null,khoibenh: null}\r\n        tmp.ngay = key;\r\n        tmp.nhiembenh = totalList[key][0];\r\n        tmp.nghinhiem = totalList[key][1];\r\n        tmp.khoibenh = totalList[key][2];\r\n        return tmp; \r\n    })\r\n\r\n    return (\r\n        <Container>\r\n                <h1>Việt Nam</h1>\r\n                <div className = \"chart-wrapper\">\r\n                    <LineChart\r\n                        width = {1000}\r\n                        height = {380}\r\n                        data={data}\r\n                        margin= {{ top: 0, right: 0, bottom: 0, left: 60 }}\r\n                    >\r\n                        <CartesianGrid strokeDasharray=\"3 3\" />\r\n                        <XAxis dataKey=\"ngay\" />\r\n                        <YAxis />\r\n                        <Tooltip />\r\n                        <Legend />\r\n                        <Line type=\"monotone\" dataKey=\"nhiembenh\" stroke=\"#d88484\" activeDot={{ r: 8 }} />\r\n                        <Line type=\"monotone\" dataKey=\"nghinhiem\" stroke=\"#cfb000\" activeDot={{ r: 8 }} />\r\n                        <Line type=\"monotone\" dataKey=\"khoibenh\" stroke=\"#00ff33\" activeDot={{ r: 8 }} />\r\n                    </LineChart>\r\n                </div>\r\n                <h1>Thế giới</h1>\r\n                    <div className = \"chart-wrapper\">\r\n                        <LineChart\r\n                            width = {1000}\r\n                            height = {380}\r\n                            data={totalData}\r\n                            margin= {{ top: 0, right: 0, bottom: 0, left: 60 }}\r\n                        >\r\n                            <CartesianGrid strokeDasharray=\"3 3\" />\r\n                            <XAxis dataKey=\"ngay\" />\r\n                            <YAxis />\r\n                            <Tooltip />\r\n                            <Legend />\r\n                            <Line type=\"monotone\" dataKey=\"nhiembenh\" stroke=\"#d88484\" activeDot={{ r: 8 }} />\r\n                            <Line type=\"monotone\" dataKey=\"nghinhiem\" stroke=\"#cfb000\" activeDot={{ r: 8 }} />\r\n                            <Line type=\"monotone\" dataKey=\"khoibenh\" stroke=\"#00ff33\" activeDot={{ r: 8 }} />\r\n                        </LineChart>\r\n                    </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\n\r\nexport default CovidChart;","import React from 'react';  \nimport './App.css';\nimport Nav from './Nav';\nimport CovidDashboard from \"./components/CovidDashboard\";\nimport CovidChart from \"./components/CovidChart\";\nimport { BrowserRouter as Router, Switch, Route} from 'react-router-dom';\n\nfunction App() {\n    return (\n        <Router>\n            <div className = \"App\">\n                <Nav/>\n                <Switch>\n                    <Route path = \"/map\" component = {CovidDashboard}/>\n                    <Route path = \"/stats\" component = {CovidChart}/>\n                </Switch>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n       <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}